// Generated by CoffeeScript 1.6.3
(function() {
  var $, GameObject, Planet, Vector, canvas, computeNextTimestep, context, gameObjects, gravitationalConstant, i, random, rgb, rgba, root, subtract, _i,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  rgb = function(r, g, b) {
    return "rgb(" + r + "," + g + "," + b + ")";
  };

  rgba = function(r, g, b, a) {
    return "rgba(" + r + "," + g + "," + b + "," + a + ")";
  };

  random = function(minimum, maximum) {
    return minimum + Math.random() * (maximum - minimum);
  };

  /* --------------------------------------------
       Begin Vector.coffee
  --------------------------------------------
  */


  Vector = (function() {
    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.add = function(other) {
      this.x += other.x;
      return this.y += other.y;
    };

    return Vector;

  })();

  /* --------------------------------------------
       Begin planet.coffee
  --------------------------------------------
  */


  gravitationalConstant = 3;

  Vector = (function() {
    function Vector(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector.prototype.add = function(other) {
      this.x += other.x;
      return this.y += other.y;
    };

    Vector.prototype.dist = function(other) {
      var dx, dy;
      dx = other.x - this.x;
      dy = other.y - this.y;
      return Math.sqrt(dx * dx + dy * dy);
    };

    Vector.prototype.length = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector.prototype.scaleTo = function(newLength) {
      this.mult(newLength / this.length());
      return this;
    };

    Vector.prototype.mult = function(ratio) {
      this.x *= ratio;
      return this.y *= ratio;
    };

    return Vector;

  })();

  subtract = function(vector1, vector2) {
    return new Vector(vector1.x - vector2.x, vector1.y - vector2.y);
  };

  GameObject = (function() {
    function GameObject() {}

    GameObject.prototype.run = function() {};

    GameObject.prototype.show = function() {};

    return GameObject;

  })();

  Planet = (function(_super) {
    __extends(Planet, _super);

    function Planet() {
      var border;
      Planet.__super__.constructor.apply(this, arguments);
      border = canvas.height / 4;
      this.loc = new Vector(random(border, canvas.width - border), random(border, canvas.height - border));
      this.vel = new Vector(0, 0);
      this.radius = 10;
      this.mass = 1;
    }

    Planet.prototype.run = function() {
      var accelerationAmount, direction, dist, force, planet, _i, _len;
      Planet.__super__.run.apply(this, arguments);
      for (_i = 0, _len = gameObjects.length; _i < _len; _i++) {
        planet = gameObjects[_i];
        dist = this.loc.dist(planet.loc);
        if (dist !== 0 && !isNaN(dist)) {
          force = gravitationalConstant * this.mass * planet.mass / Math.pow(dist, 2);
          direction = subtract(planet.loc, this.loc);
          accelerationAmount = force / this.mass;
          if (dist < this.radius + planet.radius) {
            accelerationAmount *= -1;
          }
          this.vel.add(direction.scaleTo(accelerationAmount));
        }
      }
      return this.loc.add(this.vel);
    };

    Planet.prototype.show = function() {
      Planet.__super__.show.apply(this, arguments);
      context.fillStyle = rgb(255, 200, 200);
      return context.rect(this.loc.x, this.loc.y, 1000, 1000);
    };

    return Planet;

  })(GameObject);

  /* --------------------------------------------
       Begin gravitySimulator.coffee
  --------------------------------------------
  */


  $ = jQuery;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  canvas = document.getElementById("myCanvas");

  context = canvas.getContext("2d");

  gameObjects = [];

  computeNextTimestep = function() {
    var gameObject, _i, _j, _len, _len1;
    context.fillStyle = rgb(0, 0, 0);
    context.fillRect(0, 0, 10000, 10000);
    for (_i = 0, _len = gameObjects.length; _i < _len; _i++) {
      gameObject = gameObjects[_i];
      gameObject.run();
    }
    for (_j = 0, _len1 = gameObjects.length; _j < _len1; _j++) {
      gameObject = gameObjects[_j];
      gameObject.show();
      context.fillStyle = rgb(100, 100, 100);
      context.beginPath();
      context.arc(gameObject.loc.x, gameObject.loc.y, gameObject.radius, 0, 2 * Math.PI);
      context.closePath();
      context.fill();
    }
    return setTimeout(computeNextTimestep, 0);
  };

  canvas.width = window.innerWidth;

  canvas.height = window.innerHeight;

  for (i = _i = 0; _i <= 10; i = ++_i) {
    gameObjects.push(new Planet());
  }

  computeNextTimestep();

}).call(this);
